{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","CENTURIES_FOR_FILTER","PeopleFilters","setSearchParams","query","get","selectedSex","centuries","getAll","className","classNames","sex","type","placeholder","onChange","e","newValue","target","map","century","includes","filter","year","length","Loader","PeopleTable","people","personSlug","useParams","sortBy","sortDirection","selectedGender","allCenturies","setSortParams","param","newSearchParams","filteredPeople","peopleToSort","sort","a","b","born","died","name","localeCompare","person","String","Math","floor","toLowerCase","motherName","fatherName","filterPeople","onClick","slug","mother","father","preparePeople","peop","find","human","PeoplePage","useState","setPeople","loading","setLoading","loadingError","setLoadingError","fetchData","fetch","response","json","result","useEffect","Navbar","role","isActive","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.7ab7a65e.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nexport const CENTURIES_FOR_FILTER = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const selectedSex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const handleQueryChange = (newValue: string) => {\n    if (newValue === '') {\n      searchParams.delete('query');\n    } else {\n      searchParams.set('query', newValue);\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': selectedSex === null })}\n          params={{ sex: null }}\n        >\n          All\n\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': selectedSex === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': selectedSex === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query || ''}\n            onChange={(e) => handleQueryChange(e.target.value)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_FOR_FILTER.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(year => year !== century)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length !== 0,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            query: null,\n            sex: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types/Person';\n\ntype PeopleTableProps = {\n  people: Person[],\n};\n\nconst filterPeople = (peopleToSort: Person[],\n  sort: string | null,\n  sortDirection: string | null,\n  sex: string | null,\n  centuries: string[],\n  query: string | null) => {\n  let filteredPeople: Person[] = [...peopleToSort];\n\n  switch (sort) {\n    case 'born':\n      if (sortDirection === 'desc') {\n        filteredPeople.sort((a, b) => b.born - a.born);\n      } else {\n        filteredPeople.sort((a, b) => a.born - b.born);\n      }\n\n      break;\n    case 'died':\n      if (sortDirection === 'desc') {\n        filteredPeople.sort((a, b) => b.died - a.died);\n      } else {\n        filteredPeople.sort((a, b) => a.died - b.died);\n      }\n\n      break;\n    case 'name':\n      if (sortDirection === 'desc') {\n        filteredPeople.sort((a, b) => b.name.localeCompare(a.name));\n      } else {\n        filteredPeople.sort((a, b) => a.name.localeCompare(b.name));\n      }\n\n      break;\n    case 'sex':\n      if (sortDirection === 'desc') {\n        filteredPeople.sort((a, b) => b.sex.localeCompare(a.sex));\n      } else {\n        filteredPeople.sort((a, b) => a.sex.localeCompare(b.sex));\n      }\n\n      break;\n    case null:\n    default:\n  }\n\n  if (centuries.length > 0) {\n    filteredPeople = filteredPeople.filter(person => centuries.includes(\n      String(Math.floor(person.born / 100) + 1),\n    ));\n  }\n\n  if (query !== null) {\n    filteredPeople = filteredPeople.filter(person => person.name.toLowerCase()\n      .includes(query.toLowerCase())\n    || person.motherName?.toLowerCase().includes(query.toLowerCase())\n    || person.fatherName?.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  switch (sex) {\n    case 'm':\n      return filteredPeople.filter(person => person.sex === 'm');\n    case 'f':\n      return filteredPeople.filter(person => person.sex === 'f');\n    case null:\n    default:\n  }\n\n  return filteredPeople;\n};\n\nexport const PeopleTable: React.FC<PeopleTableProps> = (\n  { people },\n) => {\n  const { personSlug } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sortBy = searchParams.get('sort');\n  const sortDirection = searchParams.get('order');\n  const selectedGender = searchParams.get('sex');\n  const allCenturies = searchParams.getAll('centuries');\n  const query = searchParams.get('query');\n\n  const setSortParams = (param: string) => {\n    const newSearchParams = new URLSearchParams(searchParams);\n    const currentSort = newSearchParams.get('sort');\n\n    if (currentSort !== param) {\n      newSearchParams.set('sort', param);\n      newSearchParams.delete('order');\n    } else if (newSearchParams.get('order') === 'desc') {\n      newSearchParams.delete('order');\n      newSearchParams.delete('sort');\n    } else {\n      newSearchParams.set('order', 'desc');\n    }\n\n    setSearchParams(newSearchParams);\n  };\n\n  const filteredPeople = filterPeople(people,\n    sortBy,\n    sortDirection,\n    selectedGender,\n    allCenturies,\n    query);\n\n  return (\n    <>\n      {filteredPeople.length === 0\n        ? <p>There are no people matching the current search criteria</p> : (\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                <th>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    Name\n                    <button onClick={() => setSortParams('name')} type=\"button\">\n                      <span className=\"icon\">\n                        <i className={classNames({\n                          'fas fa-sort': sortBy !== 'name',\n                          'fas fa-sort-up': sortBy === 'name'\n                      && sortDirection !== 'desc',\n                          'fas fa-sort-down': sortBy === 'name'\n                      && sortDirection === 'desc',\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </span>\n                </th>\n\n                <th>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    Sex\n                    <button onClick={() => setSortParams('sex')} type=\"button\">\n                      <span className=\"icon\">\n                        <i className={classNames({\n                          'fas fa-sort': sortBy !== 'sex',\n                          'fas fa-sort-up': sortBy === 'sex'\n                      && sortDirection !== 'desc',\n                          'fas fa-sort-down': sortBy === 'sex'\n                      && sortDirection === 'desc',\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </span>\n                </th>\n\n                <th>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    Born\n                    <button onClick={() => setSortParams('born')} type=\"button\">\n                      <span className=\"icon\">\n                        <i className={classNames({\n                          'fas fa-sort': sortBy !== 'born',\n                          'fas fa-sort-up': sortBy === 'born'\n                      && sortDirection !== 'desc',\n                          'fas fa-sort-down': sortBy === 'born'\n                      && sortDirection === 'desc',\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </span>\n                </th>\n\n                <th>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    Died\n                    <button\n                      onClick={() => setSortParams('died')}\n                      type=\"button\"\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames({\n                          'fas fa-sort': sortBy !== 'died',\n                          'fas fa-sort-up': sortBy === 'died'\n                      && sortDirection !== 'desc',\n                          'fas fa-sort-down': sortBy === 'died'\n                      && sortDirection === 'desc',\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </span>\n                </th>\n\n                <th>Mother</th>\n                <th>Father</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filteredPeople.map((person) => (\n\n                <tr\n                  data-cy=\"person\"\n                  className={classNames({\n                    'has-background-warning': personSlug === person.slug,\n                  })}\n                >\n                  <td>\n                    <Link\n                      className={classNames({\n                        'has-text-danger': person.sex === 'f',\n                      })}\n                      to={`/people/${person.slug}`}\n                    >\n                      {person.name}\n                    </Link>\n                  </td>\n\n                  <td>{person.sex}</td>\n                  <td>{person.born}</td>\n                  <td>{person.died}</td>\n                  <td>\n                    {person.mother\n                      ? (\n                        <Link\n                          className=\"has-text-danger\"\n                          to={`${person.mother.slug}?${searchParams.toString()}`}\n                        >\n                          {person.motherName}\n                        </Link>\n                      )\n                      : person.motherName || '-'}\n\n                  </td>\n                  <td>\n                    {person.father\n                      ? (\n                        <Link\n                          to={`${person.father.slug}?${searchParams.toString()}`}\n                        >\n                          {person.fatherName}\n                        </Link>\n                      )\n                      : person.fatherName || '-'}\n\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\n\nconst preparePeople = (peop: Person[]) => {\n  return peop.map(person => {\n    const mother = peop.find(human => human.name === person.motherName);\n    const father = peop.find(human => human.name === person.fatherName);\n\n    return ({\n      ...person,\n      mother,\n      father,\n    });\n  });\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [loadingError, setLoadingError] = useState(false);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\n        'https://mate-academy.github.io/react_people-table/api/people.json',\n      );\n      const result = await response.json();\n\n      setPeople(preparePeople(result));\n    } catch (error) {\n      setLoadingError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!loading && <PeopleFilters />}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading && <Loader />}\n\n              {loadingError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {people?.length === 0 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              ) }\n\n              {people && <PeopleTable people={people} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => (isActive\n              ? 'navbar-item has-background-grey-lighter'\n              : 'navbar-item')}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={({ isActive }) => (isActive\n              ? 'navbar-item has-background-grey-lighter'\n              : 'navbar-item')}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <h1 className=\"title\">Home Page</h1>\n              }\n            />\n\n            <Route\n              path=\"/home\"\n              element={\n                <Navigate to=\"/\" replace />\n              }\n            />\n\n            <Route\n              path=\"/people\"\n              element={\n                <PeoplePage />\n              }\n            />\n\n            <Route\n              path=\"/people/:personSlug\"\n              element={\n                <PeoplePage />\n              }\n            />\n\n            <Route\n              path=\"/people/:personSlug\"\n              element={\n                <PeoplePage />\n              }\n            />\n\n            <Route\n              path=\"/home\"\n              element={\n                <Navigate to=\"/\" replace />\n              }\n            />\n\n            <Route\n              path=\"*\"\n              element={\n                <h1 className=\"title\">Page not found</h1>\n              }\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}